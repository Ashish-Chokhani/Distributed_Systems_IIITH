// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protofiles/bft.proto

package protofiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ByzantineService_SendOrder_FullMethodName       = "/byzantine.ByzantineService/SendOrder"
	ByzantineService_ExchangeMessage_FullMethodName = "/byzantine.ByzantineService/ExchangeMessage"
	ByzantineService_RegisterGeneral_FullMethodName = "/byzantine.ByzantineService/RegisterGeneral"
	ByzantineService_GetConsensus_FullMethodName    = "/byzantine.ByzantineService/GetConsensus"
)

// ByzantineServiceClient is the client API for ByzantineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Byzantine service definition
type ByzantineServiceClient interface {
	// Commander sends initial order to lieutenants
	SendOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	// Generals exchange messages to reach consensus
	ExchangeMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	// Register a general with the system
	RegisterGeneral(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Get final consensus decision
	GetConsensus(ctx context.Context, in *ConsensusRequest, opts ...grpc.CallOption) (*ConsensusResponse, error)
}

type byzantineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewByzantineServiceClient(cc grpc.ClientConnInterface) ByzantineServiceClient {
	return &byzantineServiceClient{cc}
}

func (c *byzantineServiceClient) SendOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, ByzantineService_SendOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *byzantineServiceClient) ExchangeMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, ByzantineService_ExchangeMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *byzantineServiceClient) RegisterGeneral(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, ByzantineService_RegisterGeneral_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *byzantineServiceClient) GetConsensus(ctx context.Context, in *ConsensusRequest, opts ...grpc.CallOption) (*ConsensusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsensusResponse)
	err := c.cc.Invoke(ctx, ByzantineService_GetConsensus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ByzantineServiceServer is the server API for ByzantineService service.
// All implementations must embed UnimplementedByzantineServiceServer
// for forward compatibility.
//
// The Byzantine service definition
type ByzantineServiceServer interface {
	// Commander sends initial order to lieutenants
	SendOrder(context.Context, *OrderRequest) (*OrderResponse, error)
	// Generals exchange messages to reach consensus
	ExchangeMessage(context.Context, *MessageRequest) (*MessageResponse, error)
	// Register a general with the system
	RegisterGeneral(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Get final consensus decision
	GetConsensus(context.Context, *ConsensusRequest) (*ConsensusResponse, error)
	mustEmbedUnimplementedByzantineServiceServer()
}

// UnimplementedByzantineServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedByzantineServiceServer struct{}

func (UnimplementedByzantineServiceServer) SendOrder(context.Context, *OrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOrder not implemented")
}
func (UnimplementedByzantineServiceServer) ExchangeMessage(context.Context, *MessageRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeMessage not implemented")
}
func (UnimplementedByzantineServiceServer) RegisterGeneral(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGeneral not implemented")
}
func (UnimplementedByzantineServiceServer) GetConsensus(context.Context, *ConsensusRequest) (*ConsensusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsensus not implemented")
}
func (UnimplementedByzantineServiceServer) mustEmbedUnimplementedByzantineServiceServer() {}
func (UnimplementedByzantineServiceServer) testEmbeddedByValue()                          {}

// UnsafeByzantineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ByzantineServiceServer will
// result in compilation errors.
type UnsafeByzantineServiceServer interface {
	mustEmbedUnimplementedByzantineServiceServer()
}

func RegisterByzantineServiceServer(s grpc.ServiceRegistrar, srv ByzantineServiceServer) {
	// If the following call pancis, it indicates UnimplementedByzantineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ByzantineService_ServiceDesc, srv)
}

func _ByzantineService_SendOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ByzantineServiceServer).SendOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ByzantineService_SendOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ByzantineServiceServer).SendOrder(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ByzantineService_ExchangeMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ByzantineServiceServer).ExchangeMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ByzantineService_ExchangeMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ByzantineServiceServer).ExchangeMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ByzantineService_RegisterGeneral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ByzantineServiceServer).RegisterGeneral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ByzantineService_RegisterGeneral_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ByzantineServiceServer).RegisterGeneral(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ByzantineService_GetConsensus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsensusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ByzantineServiceServer).GetConsensus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ByzantineService_GetConsensus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ByzantineServiceServer).GetConsensus(ctx, req.(*ConsensusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ByzantineService_ServiceDesc is the grpc.ServiceDesc for ByzantineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ByzantineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "byzantine.ByzantineService",
	HandlerType: (*ByzantineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendOrder",
			Handler:    _ByzantineService_SendOrder_Handler,
		},
		{
			MethodName: "ExchangeMessage",
			Handler:    _ByzantineService_ExchangeMessage_Handler,
		},
		{
			MethodName: "RegisterGeneral",
			Handler:    _ByzantineService_RegisterGeneral_Handler,
		},
		{
			MethodName: "GetConsensus",
			Handler:    _ByzantineService_GetConsensus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/bft.proto",
}
